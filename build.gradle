/** Function always returns a new Closure that can be customized */
def defaultManifest() {
    return manifest{
        def git_cmd = "git rev-parse HEAD"
        def git_proc = git_cmd.execute()
        attributes 'SCM-Revision': git_proc.text.trim()
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
        attributes 'Build-Host': InetAddress.localHost.hostName
        attributes 'Release-Version': version
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'gradle-autojar'
apply plugin: 'cobertura'
apply plugin: 'coveralls'

sourceCompatibility = 1.6
targetCompatibility = 1.6

group = 'com.github.rholder'
version = '0.2.6'
ext.packaging = 'jar'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-autojar:1.0.1'
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.5.0'
    }
}

cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report

repositories {
    mavenCentral()
}

dependencies {
    compile "com.amazonaws:aws-java-sdk-s3:1.9.17"
    compile "com.github.rholder:guava-retrying:1.0.6"
    compile "commons-io:commons-io:2.4"
    compile "io.airlift:airline:0.6"

    runtime "org.slf4j:slf4j-simple:1.7.5"

    // junit testing
    testCompile "junit:junit:4.11"
    testCompile "com.github.stefanbirkner:system-rules:1.5.0"
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile "commons-lang:commons-lang:2.6"
}

jar {
    exclude('simplelogger.properties')
}

def findJar(prefix) {
    return configurations.compile.filter { it.name.startsWith(prefix) }
}

task prepareJodaTimezones(type: Copy) {
    group = "Distribution"
    description = "Extract joda-time timezone data files out to the build directory"

    def jarFile = findJar('joda-time').singleFile
    def outputDir = new File(buildDir, "joda-time")

    from zipTree(jarFile)
    into outputDir
    include 'org/joda/time/tz/data/**'
}

task autojarJar(type: Autojar, dependsOn: prepareJodaTimezones) {
    group = "Distribution"
    description = "Generate a stripped down Autojar'd executable jar"

    mainClass = "com.github.rholder.esthree.Main"
    manifest = defaultManifest()

    autojarFiles = [
            "com/amazonaws/sdk/versionInfo.properties",
            "com/amazonaws/regions/regions.xml",
            "awssdk_config_default.json",
            "mime.types"]

    prepareJodaTimezones.outputs.files.each {
        fileTree(it).visit {
            if(!it.isDirectory()) {
                autojarFiles.add(it.relativePath)
            }
        }
    }

    autojarClasses = [
            "org.slf4j.MDC",
            "org.slf4j.impl.StaticMDCBinder",
            "org.apache.commons.logging.impl.SimpleLog",
            "org.apache.commons.logging.impl.LogFactoryImpl",
            "com.amazonaws.internal.config.HttpClientConfigJsonHelper",
            "com.amazonaws.internal.config.HostRegexToRegionMappingJsonHelper"]
}

task executableBinary(dependsOn: autojarJar) {
    group = "Distribution"
    description = "Create a distributable standalone executable binary"

    def outputDir = new File(buildDir, "executable")
    outputs.dir outputDir
    doLast {
        autojarJar.outputs.files.each { jarFile ->
            outputDir.mkdirs()

            def out = new File(outputDir, project.name)
            out.delete()

            out.append(new FileInputStream(file("gradle/java_stub.sh")))
            out.append(new FileInputStream(jarFile.absolutePath))

            out.executable = true
        }
    }
}

task repackedJar(type: Exec, dependsOn: autojarJar) {
    group = "Distribution - Experimental"
    description = "Repack and strip debugging information with pack200 (experimental)"

    def outputDir = new File(buildDir, "repacked")
    def outputFile = new File(outputDir, project.name + "-repacked.jar")
    outputs.files outputFile

    commandLine 'pack200', '--repack', '-G', outputFile.absolutePath, autojarJar.outputs.files.asPath

    doFirst {
        outputDir.mkdirs()
    }
}

task packedExecutableBinary(dependsOn: repackedJar) {
    group = "Distribution - Experimental"
    description = "Create a distributable standalone executable binary that's been stripped of all debug info (experimental)"

    def outputDir = new File(buildDir, "executable")
    outputs.dir outputDir
    doLast {
        repackedJar.outputs.files.each { jarFile ->
            outputDir.mkdirs()

            def out = new File(outputDir, project.name)
            out.delete()

            out.append(new FileInputStream(file("gradle/java_stub.sh")))
            out.append(new FileInputStream(jarFile.absolutePath))

            out.executable = true
        }
    }
}

// enable Gradle Wrapper support for bootstrapping with specific version
task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}
